security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email # Utilisez 'email' comme identifiant de connexion
    firewalls:
        api:
            pattern: ^/api
            stateless: false # Activer l'utilisation des sessions pour l'authentification

            # Configurer l'authentification via les cookies de session
            form_login:
                login_path: /api/login # Chemin vers votre route de connexion
                check_path: /api/login_check # Chemin pour vérifier les informations de connexion

            logout:
                path: /api/logout # Chemin pour la déconnexion
                target: / # Rediriger vers l'accueil après la déconnexion
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    #   - { path: ^/api/login, roles: PUBLIC_ACCESS }
    #   - { path: ^/api/register, roles: PUBLIC_ACCESS }
    #   - { path: ^/api/(login|token/refresh), roles: PUBLIC_ACCESS }
    #   - { path: ^/api/users/*, roles: PUBLIC_ACCESS }
    #   - { path: ^/api/theme/*, roles: PUBLIC_ACCESS }
    #   - { path: ^/api/questions/*, roles: PUBLIC_ACCESS }
    #   - { path: ^/api/answers/*, roles: PUBLIC_ACCESS }
      - { path: ^/api/*,       roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon